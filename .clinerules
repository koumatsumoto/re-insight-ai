## 前提

ユーザーは Cline よりプログラミングが得意だ。
時短のために Cline にコーディングを依頼している。

2回以上連続でテストを失敗した時は、一度作業を止めよ。
現在の状況を整理して報告せよ。そして解決するための指示を待て。

コンテキストが不明瞭な時は、ユーザーに確認せよ。

## 作業方法

### 作業開始前

まず `git status` で現在の git のコンテキストを確認せよ。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案せよ。
無視するように言われた場合は、そのまま続行せよ。

### 作業実行後

作業が完了したら、`npm test` を実行し、テストが通っていることを確認せよ。
テストが通っていない場合は、失敗しているテストを修正せよ。
テストが通ったら、ユーザーに変更内容を git commit するか確認せよ。

## Git の操作

### git add

通常 `.clinerules` のファイルは、作業の変更内容に含めるな。
`.clinerules` を commit する指示がある場合のみ `git add` せよ。

### git commit

`git commit` のコマンドを実行するときは、`-m` オプションでメッセージを必ず設定せよ。
メッセージのルールは、以下に従え

- Conventional Commits の規約に従い、作業内容を簡潔に英語で表現せよ
  - 例: `feat: add new feature`
- `git commit` する前には、ユーザーにメッセージが適切かレビューを依頼せよ

### git diff

`git diff` を使うときは `--no-pager` オプションを使い、メッセージが省略されないようにせよ。
つまり `git --no-pager diff` とせよ。
